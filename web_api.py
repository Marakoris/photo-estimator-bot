# -*- coding: utf-8 -*-
from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import traceback
from dotenv import load_dotenv
import requests
from openai import OpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv("/root/.env")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
client = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1",
    default_headers={
        "HTTP-Referer": "https://your-domain.ru",
        "X-Title": "VK Photo Estimator Bot Web"
    }
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏
web_chat_history = {}

app = Flask(__name__)
# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
CORS(app, resources={
    r"/*": {
        "origins": "*",
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})

def send_to_gpt_web(user_id, user_message, base64_image=None):
    """–û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–æ–≤"""
    if user_id not in web_chat_history:
        web_chat_history[user_id] = [
            {"role": "system", "content": (
                "–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ —Å–∫—É–ø–∫–µ —Ñ–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏ –≤ –†–æ—Å—Å–∏–∏. "
                "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∫—Ä–∞—Ç–∫–æ –∏ —á—ë—Ç–∫–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∫–∞–º–µ—Ä—ã –∏ –æ–±—ä–µ–∫—Ç–∏–≤—ã "
                "–≤ —Ä—É–±–ª—è—Ö –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Ä—ã–Ω–æ—á–Ω—ã–º —Ü–µ–Ω–∞–º."
            )}
        ]
    
    content = []
    if user_message:
        content.append({"type": "text", "text": user_message})
    if base64_image:
        content.append({"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}})
    
    web_chat_history[user_id].append({"role": "user", "content": content})
    
    try:
        response = client.chat.completions.create(
            model="openai/gpt-4o-2024-05-13",
            messages=web_chat_history[user_id],
            max_tokens=1000
        )
        
        if not response.choices:
            return "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
            
        reply = response.choices[0].message.content
        web_chat_history[user_id].append({"role": "assistant", "content": reply})
        return reply
        
    except Exception as e:
        print(f"[GPT ERROR] {e}")
        traceback.print_exc()
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {str(e)}"

@app.route('/chat', methods=['POST', 'OPTIONS'])
def chat():
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
    if request.method == 'OPTIONS':
        return jsonify({"status": "ok"}), 200
        
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "No JSON data received"}), 400
            
        text = data.get("text", "").strip()
        image_base64 = data.get("image_base64")

        print(f"[WEB REQUEST] text: '{text}', has_image: {bool(image_base64)}, user_agent: {request.headers.get('User-Agent', 'unknown')}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if image_base64:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä base64 —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞)
                image_size_mb = len(image_base64) * 3 / 4 / 1024 / 1024
                print(f"[IMAGE] Size: {image_size_mb:.2f} MB")
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (10MB –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
                if image_size_mb > 10:
                    return jsonify({"error": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º 10MB."}), 400
                    
            except Exception as e:
                print(f"[IMAGE ERROR] {e}")
                return jsonify({"error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"}), 400

        if not text and not image_base64:
            return jsonify({"error": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}), 400

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤–µ–±-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = f"web-user-{request.remote_addr.replace('.', '-')}"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if image_base64 and not text:
            text = "–û–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ, –∏ —É—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏."

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        reply = send_to_gpt_web(user_id, text, image_base64)
        
        print(f"[WEB REPLY] {reply[:100]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        try:
            notify_telegram(user_id, text, reply)
        except Exception as telegram_error:
            print(f"[TELEGRAM ERROR] {telegram_error}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Telegram –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

        return jsonify({"reply": reply})
        
    except Exception as e:
        print(f"[WEB ERROR] {e}")
        traceback.print_exc()
        return jsonify({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

def notify_telegram(user_id, text, reply):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        print("[TELEGRAM] Token or Chat ID not configured")
        return
        
    message = (
        "üåê –ù–æ–≤—ã–π —á–∞—Ç —Å —Å–∞–π—Ç–∞:\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å: {text or '(—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ)'}\n"
        f"üí¨ –û—Ç–≤–µ—Ç: {reply[:500]}{'...' if len(reply) > 500 else ''}"
    )
    
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    try:
        response = requests.post(
            url, 
            json={"chat_id": TELEGRAM_CHAT_ID, "text": message},
            timeout=5
        )
        if response.status_code == 200:
            print("[TELEGRAM] Notification sent successfully")
        else:
            print(f"[TELEGRAM] Error: {response.status_code}, {response.text}")
    except Exception as e:
        print(f"[TELEGRAM ERROR] {e}")

@app.route('/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({"status": "ok", "message": "Web API is running"})

if __name__ == '__main__':
    print("[WEB API] Starting on http://0.0.0.0:8080")
    app.run(host='0.0.0.0', port=8080, debug=True)

#!/bin/bash

# Photo Estimator Bot - Deploy Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Photo Estimator Bot..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [[ $EUID -ne 0 ]]; then
   error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root"
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_DIR="/root/photo-estimator-bot"
VENV_DIR="$PROJECT_DIR/gpt-bot-env"
REPO_URL="https://github.com/Marakoris/photo-estimator-bot.git"

log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
apt update
apt install -y python3 python3-venv python3-pip git curl

log "–ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å GitHub..."
if [ -d "$PROJECT_DIR" ]; then
    warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PROJECT_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è–µ–º..."
    cd $PROJECT_DIR
    git pull origin main
else
    log "–ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
    git clone $REPO_URL $PROJECT_DIR
    cd $PROJECT_DIR
fi

log "–°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
if [ ! -d "$VENV_DIR" ]; then
    python3 -m venv $VENV_DIR
fi

log "–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
source $VENV_DIR/bin/activate
pip install --upgrade pip
pip install -r requirements.txt

log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª .env..."
if [ ! -f ".env" ]; then
    if [ -f ".env.example" ]; then
        warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example"
        cp .env.example .env
    else
        warning "–°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
        cat > .env << 'EOF'
# OpenRouter API –¥–ª—è GPT-4
OPENROUTER_API_KEY=your_openrouter_api_key_here

# VK API —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞
VK_API_TOKEN=your_vk_bot_token_here

# Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
TELEGRAM_CHAT_ID=your_telegram_chat_id_here
EOF
    fi
    warning "‚ö†Ô∏è  –í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏:"
    echo "nano $PROJECT_DIR/.env"
    echo ""
fi

log "–ü—Ä–æ–≤–µ—Ä—è–µ–º systemd —Å–µ—Ä–≤–∏—Å—ã..."
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ–∞–π–ª—ã —Å–ª—É–∂–±
if [ -f "services/gpt-bot.service" ]; then
    SERVICE_DIR="services"
elif [ -f "gpt-bot.service" ]; then
    SERVICE_DIR="."
else
    warning "–§–∞–π–ª—ã —Å–ª—É–∂–± –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏—Ö..."
    mkdir -p services
    SERVICE_DIR="services"
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª—É–∂–±—É –¥–ª—è VK –±–æ—Ç–∞
    cat > services/gpt-bot.service << EOF
[Unit]
Description=VK GPT —Ñ–æ—Ç–æ—Å–∫—É–ø–∫–∞ –±–æ—Ç
After=network.target
Wants=network.target

[Service]
Type=simple
User=root
Group=root
WorkingDirectory=$PROJECT_DIR
Environment=PATH=$PROJECT_DIR/gpt-bot-env/bin
ExecStart=$PROJECT_DIR/gpt-bot-env/bin/python $PROJECT_DIR/bot.py
Restart=always
RestartSec=10
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=gpt-bot

[Install]
WantedBy=multi-user.target
EOF

    # –°–æ–∑–¥–∞–µ–º —Å–ª—É–∂–±—É –¥–ª—è Web API
    cat > services/gpt-web.service << EOF
[Unit]
Description=Flask GPT Web API
After=network.target
Wants=network.target

[Service]
Type=simple
User=root
Group=root
WorkingDirectory=$PROJECT_DIR
Environment=PATH=$PROJECT_DIR/gpt-bot-env/bin
Environment=FLASK_ENV=production
ExecStart=$PROJECT_DIR/gpt-bot-env/bin/gunicorn --bind 0.0.0.0:8080 --workers 2 --timeout 120 web_api:app
Restart=always
RestartSec=10
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=gpt-web

[Install]
WantedBy=multi-user.target
EOF
fi

log "–û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ systemd —Å–µ—Ä–≤–∏—Å–∞—Ö..."
# –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å)
if [ "$SERVICE_DIR" != "." ]; then
    sed -i "s|/root/photo-estimator-bot|$PROJECT_DIR|g" $SERVICE_DIR/gpt-bot.service 2>/dev/null || true
    sed -i "s|/root/photo-estimator-bot|$PROJECT_DIR|g" $SERVICE_DIR/gpt-web.service 2>/dev/null || true
fi

log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å—ã..."
cp $SERVICE_DIR/gpt-bot.service /etc/systemd/system/
cp $SERVICE_DIR/gpt-web.service /etc/systemd/system/

log "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd –∏ –≤–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
systemctl daemon-reload
systemctl enable gpt-bot.service gpt-web.service

log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
if [ -f ".env" ]; then
    if grep -q "your_.*_here" .env; then
        warning "–í —Ñ–∞–π–ª–µ .env –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã placeholder –∑–Ω–∞—á–µ–Ω–∏—è. –û–±–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á–∏!"
    fi
fi

log "–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã Python..."
source $VENV_DIR/bin/activate
python3 -c "import flask, vk_api, openai; print('‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')" || error "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"

echo ""
echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏:"
echo "   nano $PROJECT_DIR/.env"
echo ""
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "   systemctl start gpt-bot.service gpt-web.service"
echo ""
echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å:"
echo "   systemctl status gpt-bot.service"
echo "   systemctl status gpt-web.service"
echo ""
echo "4. –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:"
echo "   journalctl -u gpt-bot.service -f"
echo "   journalctl -u gpt-web.service -f"
echo ""
echo "üåê Web API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080"
echo "ü§ñ VK –±–æ—Ç –Ω–∞—á–Ω–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã, –µ—Å–ª–∏ .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω
if grep -q "your_.*_here" .env 2>/dev/null; then
    warning "‚ö†Ô∏è  –í —Ñ–∞–π–ª–µ .env –Ω–∞–π–¥–µ–Ω—ã placeholder –∑–Ω–∞—á–µ–Ω–∏—è. –û–±–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!"
else
    log "API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
    systemctl start gpt-bot.service gpt-web.service
    sleep 2
    
    echo ""
    echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    systemctl is-active gpt-bot.service && echo "‚úÖ VK Bot –∑–∞–ø—É—â–µ–Ω" || echo "‚ùå VK Bot –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    systemctl is-active gpt-web.service && echo "‚úÖ Web API –∑–∞–ø—É—â–µ–Ω" || echo "‚ùå Web API –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    
    echo ""
    echo "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
    echo "   journalctl -u gpt-bot.service -f"
    echo "   journalctl -u gpt-web.service -f"
fi
echo ""
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "   systemctl start gpt-bot.service gpt-web.service"
echo ""
echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å:"
echo "   systemctl status gpt-bot.service"
echo "   systemctl status gpt-web.service"
echo ""
echo "4. –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:"
echo "   journalctl -u gpt-bot.service -f"
echo "   journalctl -u gpt-web.service -f"
echo ""
echo "üåê Web API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080"
echo "ü§ñ VK –±–æ—Ç –Ω–∞—á–Ω–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"

log "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
